/*Методы поиска*/
document.getElementById(id)
Найти элемент по его id
let el=document.getElementById('elem');


elem.querySelector(css)
Найти первый элемент, соответствующий css-селектору внутри  элемента elem
let el=elem.querySelector('div img');


elem.querySelectorAll(css)
Получить все элементы, соответствующие css-селектору внутри элемента elem. Возвращает статическую коллекцию.
let elArr=elem.querySelector('div img');


elem.matches(css)
Проверить соответствует ли элемент elem селектору css. Возвращает true/false
if (elem.matches('a[href$="zip"]'))<br>{alert("Совпало");}


elem.closest(css)
Ищет первый родительский элемент, соответствующий селектору в аргументе
let el=elem.closest('div img');


elem.getElementsByTagName(tag)
<b>Устарело.</b> Получить список элементов по названию тега. Возвращает живую коллекцию.
let divs = elem.getElementsByTagName ('div');


el.getElementsByClassName (Name)
<b>Устарело.</b> Получить список элементов по названию класса Name. Возвращает живую коллекцию.
let elems = el.getElementsByClassName ('container');


document.getElementsByName (name)
возвращает элементы с заданным атрибутом name. Возвращает живую коллекцию.
let inputs = table.getElementsByTagName ('input');


elemA.contains(elemB)
Проверяет, содержится ли внутри элемента A элемент-потомок B. Возвращает true/false (начинает поиск с себя самого)
if (elemA.contains(elemB)) {alert("Содержит");}


elem.childNodes()
Получить коллекцию дочерних узлов (прямых потомков.). Возвращает живую коллекцию
for (let i=0; i&lt;document.body.childNodes.length; i++) {<br>alert(document.body.childNodes[i]);<br>}


elem.firstElementChild()
Получить первый дочерний элемент. Игнорируются текстовые узлы и комментарии.
let el=elem.firstElementChild();


elem.firstChild()
Получить первый дочерний узел, в том числе текстовый узел или комментарий
let el=elem.firstChild();


elem.lastElementChild()
Получить последний дочерний элемент. Игнорируются текстовые узлы и комментарии.
let el=elem.lastElementChild();


elem.lastChild()
Получить последний дочерний узел, в том числе текстовый узел или комментарий
let el=elem.lastChild();


elem.parentElement()
Получить родительский элемент. Игнорируются текстовые узлы и комментарии
let el=elem.parentElement();


elem.parentNode()
Получить родительский узел, в том числе тектовый узел или комментарий
let el=elem.parentNode();


/*Работа с аттрибутами*/
elem.getAttribute(name)
получает значение атрибута
imageOnPage.getAttribute('src');//вернём ссылку из src


elem.hasAttribute(name)
проверяет наличие атрибута: true/false
button.hasAttribute('onclick'); 


elem.setAttribute(name, value)
устанавливает значение атрибута
button.setAttribute('lang', 'ru');


elem.removeAttribute(name)
удаляет атрибут
button.removeAttribute('disabled');//удаляем атрибут


/*Методы работы с классами*/
elem.className
Получить доступ к строке классов элемента elem. Работает на чтение/запись.
elem.className="container d-block s-4";


elem.classList
Получить список классов, которые имеются у элемента. Только чтение
for (let name of elem.classList)<br>{alert(name);}


elem.classList.add("class")
добавить класс или перечень классов
cat.classList.add('black', 'white', 'fluffy');


elem.classList.remove("class")
добавить/удалить класс
cat.classList.remove('cat-small');


elem.classList.toggle("class")
добавить класс, если его нет, иначе удалить
cat.classList.toggle("fluffy");


elem.classList.contains ("class")
проверка наличия класса, возвращает true/false
if(elem.classList.contains("class"))<br>{alert("Есть такой класс");}


/*Методы работы со стилями*/
elem.style
Доступ к аттрибуту стиля
elem.style.width="100px";


getComputedStyle (element,[pseudo])
Получить окончательное значение свойства элемента element (и псевдоэлемента, если указан)
let computedStyle = getComputedStyle(document.body);<br>alert(computedStyle.marginTop);//5px<br>alert(computedStyle.color);//rgb(255, 0, 0)


/*<a href="https://learn.javascript.ru/modifying-document" target="_blank">Изменение документа. Работа с элементами</a>*/
document.createElement(tag)
Создать новый элемент с тегом tag
const newElement = document.createElement('div');<br>newElement.textContent = 'Новый элемент';


node.append(&hellip;nodes or strings)<br>node.prepend(&hellip;nodes or strings)<br>node.before(&hellip;nodes or strings)<br>node.after(&hellip;nodes or strings)
Вставить элемент или текст в соответствующее место узла<br><img src="assets/img/before-prepend-append-after.svg">
let liFirst = document.createElement('li');<br>liFirst.innerHTML = 'prepend';<br> ol.prepend(liFirst); //вставить liFirst в начало


node.insertAdjacentHTML(where, html)
Вставить html в DOM-узел с учётом положения Where:<br>"beforebegin" – вставить html непосредственно перед node<br>"afterbegin" – вставить html в начало node<br>"beforeend" – вставить html в конец node<br>"afterend" – вставить html непосредственно после node
div.insertAdjacentHTML ('beforebegin','&lt;p&gt;Привет&lt;/p&gt;');<br>div.insertAdjacentHTML ('afterend','&lt;p&gt;Пока&lt;/p&gt;');


node.remove()
Удалить узел. <i>Если узел будет перемещаться, его удалять не надо</i>
let div = document.createElement('div');<br>div.remove();


node.cloneNode(bool)
Клонировать узел. bool: true/false - клонировать с дочерними элементами или без.
let div2=div.cloneNode(true);


/*<a href="https://learn.javascript.ru/introduction-browser-events" target="_blank">События</a>*/
element.addEventListener (eventName,handler,[options]);
Назначить элементу element событие eventName, обработка которого реализована в функции handler. Про опции в <a href="https://learn.javascript.ru/introduction-browser-events#addeventlistener" target="_blank">ссылке</a>.
element.addEventListener ('click', makeClick);


element.removeEventListener (eventName,handler);
Удалить у элемента element функцию-обработчик handler, назначенную для события eventName. Удаление события
element.removeEventListener ('click', makeClick);